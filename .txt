import {
  getRayon,
  createRayon,
  deleteRayon,
  updateRayon,
  getRombel,
  createRombel,
  updateRombel,
  deleteRombel,
  getStudent,
  getOneStudent,
  createStudent,
  updateStudent,
  deleteStudent,
  uploadFile,
  verifikasi,
} from "../controllers/Formulir.js";
import upload from "../middleware/uploadFile.js";
// import { isAdmin } from "../middleware/isAdmin.js";
// import { isMurid } from "../middleware/isMurid.js";
// import { isLogin } from "../middleware/isLogin.js";
import express from "express";

const routes = express.Router();
routes.get("/rayon", getRayon);
routes.post("/rayon", createRayon);
routes.put("/update-rayon/:id", updateRayon);
routes.delete("/delete-rayon/:id", deleteRayon);

routes.get("/rombel", getRombel);
routes.post("/rombel", createRombel);
routes.put("/update-rombel/:id", updateRombel);
routes.delete("/delete-rombel/:id", deleteRombel);

routes.get("/student", getStudent);
routes.get("/student/:id", getOneStudent);
routes.post("/student/create", createStudent);
routes.put("/student/update/:id", updateStudent);
routes.delete("/student/delete/:id", deleteStudent);

routes.post(
  "/upload/:id",
  upload.fields([
    { name: "ijazah", maxCount: 1 },
    { name: "akte_kelahiran", maxCount: 1 },
    { name: "skhun", maxCount: 1 },
    { name: "kk", maxCount: 1 },
  ]),
  (req, res) => {
    try {
      const files = req.files;

      res.status(200).json({ message: "File berhasil diupload", files: files });
    } catch (error) {
      console.error(error);
      res
        .status(500)
        .json({ message: "Terjadi kesalahan dalam pemrosesan file" });
    }
  },
  uploadFile
);
routes.post("/verifikasi/:id", verifikasi);

export default routes;




////////////////////////////////////////////////////////////////

import Family from "../models/Student/Family.js";
import Student from "../models/Student/Student.js";
import Rombel from "../models/Student/Rombel.js";
import Rayon from "../models/Student/Rayon.js";
import User from "../models/User.js";
import Dokumen from "../models/Student/Dokumen.js";
import upload from "../middleware/uploads.js";
import multer from "multer";
import argon2 from "argon2";

export const createRayon = async (req, res) => {
  try {
    const {
      nama_rayon,
      nama_pembimbing,
      username,
      password,
      email_pembimbing,
    } = req.body;

    const hashedPassword = await argon2.hash(password);

    const accPembimbing = new User({
      username: username,
      email: email_pembimbing,
      password: hashedPassword,
      role: "guru",
    });

    const savedAccPemb = await accPembimbing.save();

    const rayon = new Rayon({
      pembimbing_id: savedAccPemb._id,
      nama_rayon: nama_rayon,
      nama_pembimbing: nama_pembimbing,
    });

    const savedRayon = await rayon.save();

    res.status(200).json({
      massage: "success",
      rayon: savedRayon,
      acc: savedAccPemb._id,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      massage: "Error",
    });
  }
};

export const getRayon = async (req, res) => {
  try {
    const dataRayon = await Rayon.find()
      .populate({ path: "pembimbing_id", model: "User" })
      .lean();
    if (!dataRayon) {
      console.log(dataRayon);
      return res.status(404).json({
        message: "Data Rayon Not Found",
      });
    }

    res.status(200).json({
      rayon: dataRayon,
      message: "Success Get Data Rayon",
    });
  } catch (error) {
    console.log(error);
    res.status(404).json({
      error: error.message,
      message: "Failed Get Data Rayon",
    });
  }
};

export const updateRayon = async (req, res) => {
  try {
    const { id } = req.params;

    const rayon = await Rayon.findById(id);

    const pembimbing_id = rayon.pembimbing_id;

    const updateDataRayon = {
      nama_rayon: req.body.nama_rayon,
      nama_pembimbing: req.body.nama_pembimbing,
    };
    const resultRayon = await Rayon.findByIdAndUpdate(id, updateDataRayon, {
      new: true,
    });

    const password = req.body.password;

    const hashedPassword = await argon2.hash(password);

    const updateAccPemb = {
      username: req.body.username,
      password: hashedPassword,
    };

    const resultAccPemb = await User.findByIdAndUpdate(
      pembimbing_id,
      updateAccPemb,
      {
        new: true,
      }
    );

    res.status(200).json({
      message: "Success",
      resultRayon,
      resultAccPemb,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Failed", error: error.message });
  }
};

export const deleteRayon = async (req, res) => {
  try {
    const { id } = req.params;

    const rayon = await Rayon.findById(id);
    const pembimbing_id = rayon.pembimbing_id;

    const user = await User.findByIdAndDelete(pembimbing_id);
    const result = await Rayon.findByIdAndDelete(id);

    if (!result) {
      return res.status(404).json({ message: "Data Not Found" });
    }

    return res.status(200).json({
      message: "Success",
      result,
      user,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Failed", error: error });
  }
};

export const createRombel = async (req, res) => {
  try {
    const { nama_rombel } = req.body;

    const rombel = new Rombel({
      nama_rombel,
    });

    const saveRombel = await rombel.save();

    res.status(200).json({
      massage: "success",
      saveRombel,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error,
      massage: "Error",
    });
  }
};

export const updateRombel = async (req, res) => {
  try {
    const { id } = req.params;
    const updateDataRombel = req.body;
    const result = await Rombel.findByIdAndUpdate(id, updateDataRombel, {
      new: true,
    });

    if (!result) {
      return res.status(404).json({ message: "Data Not Found" });
    }

    return res.status(200).json({
      message: "Success",
      result,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Failed", error: error });
  }
};

export const deleteRombel = async (req, res) => {
  try {
    const { id } = req.params;

    const result = await Rombel.findByIdAndDelete(id);

    if (!result) {
      return res.status(404).json({ message: "Data Tidak Ditemukan" });
    }

    return res.status(200).json({
      message: "Success",
      result,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Failed", error: error });
  }
};

export const getRombel = async (req, res) => {
  try {
    const rombel = await Rombel.find();
    if (!rombel) {
      console.log(rombel);
      return res.status(404).json({
        message: "Data Rombel Not Found",
      });
    }

    res.status(200).json({
      rombel: rombel,
      message: "Success Get Data Rombel",
    });
  } catch (error) {
    console.log(error);
    res.status(404).json({
      error: error.message,
      message: "Failed Get Data Rombel",
    });
  }
};

export const createStudent = async (req, res) => {
  try {
    const family = new Family();
    const savedFamily = await family.save();

    const { username, password, email, nama, rombel, rayon, nis, jk } =
      req.body;

    const hashedPassword = await argon2.hash(password);

    const existingStudent = await Student.findOne({ nis });

    if (existingStudent) {
      return res.status(500).json({
        message: "Student Sudah Terdaftar",
      });
    }

    const student = new Student({
      keluarga_id: savedFamily._id,
      nama: nama,
      rombel: rombel,
      rayon: rayon,
      nis: nis,
      jk: jk,
      email: email,
    });

    const savedStudent = await student.save();

    const user = new User({
      username: username,
      password: hashedPassword,
      email: email,
      role: "student",
    });

    const savedUser = await user.save();

    res.status(200).json({
      message: "Berhasil Menambahkan Data Student",
      student: savedStudent,
      family: savedFamily,
      user: savedUser.username,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menambahkan Data Student",
    });
  }
};

export const getStudent = async (req, res) => {
  try {
    const students = await Student.find()
      .populate([
        { path: "keluarga_id", model: "Family" },
        { path: "dokumen_id", model: "Dokumen" },
      ])
      .lean();
    if (!students) {
      console.log(students);
      return res.status(404).json({
        message: "Data Student is Empty",
      });
    }

    res.status(200).json({
      message: "Succes To Get Data Student",
      students: students,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Failed To Get Data Student",
    });
  }
};

export const getOneStudent = async (req, res) => {
  try {
    const { id } = req.params;
    const student = await Student.findById(id)
      .populate([
        { path: "keluarga_id", model: "Family" },
        { path: "dokumen_id", model: "Dokumen" },
      ])
      .lean();

    if (!student) {
      console.log(student);
      return res.status(404).json({
        message: "Data Student Not Found",
      });
    }
    res.status(200).json({
      message: "Success to Get One Student",
      student: student,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Failed to Get One Student",
    });
  }
};

export const updateStudent = async (req, res) => {
  try {
    const { id } = req.params;
    const student = await Student.findById(id);
    const family_id = student.keluarga_id;

    if (!student) {
      console.log(student);
      return res.status(404).json({
        message: "Data Student Not Found",
      });
    }

    const updateStudent = {
      nisn: req.body.nisn,
      nik: req.body.nik,
      no_kk: req.body.no_kk,
      tempat_lahir: req.body.tempat_lahir,
      tanggal_lahir: req.body.tanggal_lahir,
      no_akta: req.body.no_akta,
      agama: req.body.agama,
      kewarganegaraan: req.body.kewarganegaraan,
      alamat: req.body.alamat,
      rt: req.body.rt,
      rw: req.body.rw,
      nama_dusun: req.body.nama_dusun,
      kecamatan: req.body.kecamatan,
      nama_kota: req.body.nama_kota,
      provinsi: req.body.provinsi,
      kode_pos: req.body.kode_pos,
      transportasi: req.body.transportasi,
      anak_ke: req.body.anak_ke,
      tinggal_bersama: req.body.tinggal_bersama,
      no_telp: req.body.no_telp,
      tb: req.body.tb,
      bb: req.body.bb,
      gol_darah: req.body.gol_darah,
      asal_smp: req.body.asal_smp,
      no_ijazah_smp: req.body.no_ijazah_smp,
      skhun: req.body.skhun,
      no_un: req.body.no_un,
    };
    const resultStudent = await Student.findByIdAndUpdate(id, updateStudent, {
      new: true,
    });

    if (!resultStudent) {
      console.log(resultStudent);
      return res.status(404).json({
        message: "Data Student Not Found",
      });
    }

    const updatedFamily = {
      nama_ayah: req.body.nama_ayah,
      nik_ayah: req.body.nik_ayah,
      tanggal_lahir_ayah: req.body.tanggal_lahir_ayah,
      pendidikan_ayah: req.body.pendidikan_ayah,
      pekerjaan_ayah: req.body.pekerjaan_ayah,
      penghasilan_ayah: req.body.penghasilan_ayah,
      nama_ibu: req.body.nama_ibu,
      nik_ibu: req.body.nik_ibu,
      tanggal_lahir_ibu: req.body.tanggal_lahir_ibu,
      pendidikan_ibu: req.body.pendidikan_ibu,
      pekerjaan_ibu: req.body.pekerjaan_ibu,
      penghasilan_ibu: req.body.penghasilan_ibu,
      nama_wali: req.body.nama_wali,
      nik_wali: req.body.nik_wali,
      tanggal_lahir_wali: req.body.tanggal_lahir_wali,
      pendidikan_wali: req.body.pendidikan_wali,
      pekerjaan_wali: req.body.pekerjaan_wali,
      penghasilan_wali: req.body.penghasilan_wali,
    };

    const resultFamily = await Family.findByIdAndUpdate(
      family_id,
      updatedFamily,
      {
        new: true,
      }
    );

    if (!resultFamily) {
      console.log(resultFamily);
      return res.status(404).json({
        message: "Data Family Not Found",
      });
    }
    res.status(201).json({
      message: "Berhasil Update Data Student",
      student: resultStudent,
      family: resultFamily,
    });
  } catch (error) {
    console.loh(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Update Data Student",
    });
  }
};

export const deleteStudent = async (req, res) => {
  try {
    const { id } = req.params;
    const student = await Student.findById(id);

    if (!student) {
      console.log(student);
      return res.status(404).json({
        message: "Data Student Not Found",
      });
    }

    const family_id = student.keluarga_id;
    const dokumen_id = student.dokumen_id;
    const nis = student.nis;

    const deleteFamily = await Family.findByIdAndDelete(family_id);
    const deleteDokumen = await Dokumen.findByIdAndDelete(dokumen_id);
    const deleteAcc = await User.findOneAndDelete({ username: nis });
    const deleteStudent = await Student.findByIdAndDelete(id);

    res.status(200).json({
      message: "Berhasil Menghapus Data Student",
      student: deleteStudent,
      family: deleteFamily,
      dokumen: deleteDokumen,
      user: deleteAcc,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.massage,
      message: "Gagal Menghapus Data Student",
    });
  }
};

// Get all files
export const getFiles = async (req, res) => {
  try {
    const files = await File.find();
    res.status(200).json(files);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Create a new file
export const createFile = async (req, res) => {
  try {
    upload.single("file")(req, res, async (err) => {
      if (err) {
        return res.status(500).json({ error: err.message });
      }

      const { name, filename, path } = req.body;
      const newFile = new File({ name, filename, path });
      const savedFile = await newFile.save();
      res.status(201).json(savedFile);
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Update a file
export const updateFile = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, filename, path } = req.body;
    const updatedFile = await File.findByIdAndUpdate(
      id,
      { name, filename, path },
      { new: true }
    );
    res.status(200).json(updatedFile);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Delete a file
export const deleteFile = async (req, res) => {
  try {
    const { id } = req.params;
    await File.findByIdAndDelete(id);
    res.status(200).json({ message: "File deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

export const verifikasi = async (req, res) => {
  try {
    const { id } = req.params;

    const verifikasi = {
      status: "Verifikasi",
    };

    const updateStatus = await Student.findByIdAndUpdate(id, verifikasi, {
      new: true,
    });

    res.status(200).json({
      message: "Berhasil Verifikasi",
      student_status: updateStatus.status,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Verifikasi",
    });
  }
};



///////////////////////////////////////////////////////////////////
import mongoose from "mongoose";

const docGtkSchema = mongoose.Schema({
  ijazah_sd: {
    type: String,
    required: true,
  },
  ijazah_smp: {
    type: String,
    required: true,
  },
  ijazah_sma: {
    type: String,
    required: true,
  },
  ijazah_univ: {
    type: String,
    required: true,
  },
  ktp: {
    type: String,
    required: true,
  },
  kk: {
    type: String,
    required: true,
  },
  akte: {
    type: String,
    required: true,
  },
});

const resultGtkDocument = mongoose.model("resultGtkDocument", docGtkSchema);
export default resultGtkDocument;


/////////////////////////////////////////////////////////////////////////////

import multer from "multer";
import path from "path";

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "uploads/");
  },
  filename: (req, file, cb) => {
    cb(null, file.originalname);
  },
});

const checkFileType = (file, cb) => {
  const filetypes = /pdf/;
  const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
  const mimetype = filetypes.test(file.mimetype);
  if (mimetype && extname) {
    return cb(null, true);
  } else {
    return cb(
      new Error(
        `Error: File upload only supports the following files ${filetypes}`
      )
    );
  }
};

export const upload = multer({
  storage: storage,
  fileFilter: checkFileType,
  limits: {
    fileSize: 1024 * 1024 * 1024,
  },
});



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // const fields = ["ijazah_smp", "akte_kelahiran", "skhun", "kk"];
    // const images = {};

    // for (const field of fields) {
    //   if (req.files[field]) {
    //     images[field] = req.files[field].map((file) => file.filename);
    //   }
    // }

    // const result = await Dokumen.create(images);

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import {
  getRayon,
  createRayon,
  deleteRayon,
  updateRayon,
  getRombel,
  createRombel,
  updateRombel,
  deleteRombel,
  getStudent,
  getOneRayon,
  getOneStudent,
  getOneStudentLogin,
  createStudent,
  updateStudent,
  deleteStudent,
  uploadFile,
  verifikasi,
} from "../controllers/Formulir.js";
import upload from "../middleware/uploads.js";
// import { isAdmin } from "../middleware/isAdmin.js";
// import { isMurid } from "../middleware/isMurid.js";
// import { isLogin } from "../middleware/isLogin.js";
import express from "express";

const routes = express.Router();
routes.get("/rayon", getRayon);
routes.get("/rayon/:id", getOneRayon);
routes.post("/rayon", createRayon);
routes.put("/update-rayon/:id", updateRayon);
routes.delete("/delete-rayon/:id", deleteRayon);

routes.get("/rombel", getRombel);
routes.post("/rombel", createRombel);
routes.put("/update-rombel/:id", updateRombel);
routes.delete("/delete-rombel/:id", deleteRombel);

routes.get("/student", getStudent);
routes.get("/student/:id", getOneStudent);
routes.post("/student/create", createStudent);
routes.put("/student/update/:id", updateStudent);
routes.delete("/student/delete/:id", deleteStudent);
routes.get("/dashboard/student/:id", getOneStudentLogin);

routes.post(
  "/upload/:id",
  upload.fields([
    { name: "documentIjazah", maxCount: 1 },
    { name: "documentAkte", maxCount: 1 },
    { name: "documentSkhun", maxCount: 1 },
    { name: "documentKk", maxCount: 1 },
  ]),
  uploadFile
);
routes.post("/verifikasi/:id", verifikasi);

export default routes;
////////////////////////////////



import Family from "../models/Student/Family.js";
import Dokumen from "../models/Student/Dokumen.js";
import Student from "../models/Student/Student.js";
import Rombel from "../models/Student/Rombel.js";
import Rayon from "../models/Student/Rayon.js";
import User from "../models/User.js";
import path from "path";
import multer from "multer";
import argon2 from "argon2";

export const createRayon = async (req, res) => {
  try {
    const {
      nama_rayon,
      nama_pembimbing,
      username,
      password,
      email_pembimbing,
    } = req.body;

    const hashedPassword = await argon2.hash(password);

    const accPembimbing = new User({
      username: username,
      email: email_pembimbing,
      password: hashedPassword,
      role: "guru",
    });

    const savedAccPemb = await accPembimbing.save();

    const rayon = new Rayon({
      pembimbing_id: savedAccPemb._id,
      nama_rayon: nama_rayon,
      nama_pembimbing: nama_pembimbing,
    });

    const savedRayon = await rayon.save();

    res.status(200).json({
      massage: "success",
      rayon: savedRayon,
      acc: savedAccPemb._id,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      massage: "Error",
    });
  }
};

export const getRayon = async (req, res) => {
  try {
    const dataRayon = await Rayon.find()
      .populate({ path: "pembimbing_id", model: "User" })
      .lean();
    if (!dataRayon) {
      console.log(dataRayon);
      return res.status(404).json({
        message: "Data Rayon Not Found",
      });
    }

    res.status(200).json({
      rayon: dataRayon,
      message: "Success Get Data Rayon",
    });
  } catch (error) {
    console.log(error);
    res.status(404).json({
      error: error.message,
      message: "Failed Get Data Rayon",
    });
  }
};

export const getOneRayon = async (req, res) => {
  try {
    const { id } = req.params;
    const rayon = await Rayon.findById(id)
      .populate({
        path: "pembimbing_id",
        model: "User",
      })
      .lean();

    if (!rayon) {
      console.log(rayon);
      return res.status(404).json({
        message: "Data Rayon Not Found",
      });
    }

    res.status(200).json({
      message: "Get One Rayon Success",
      rayon: rayon,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Get One Rayon Failed",
    });
  }
};

export const updateRayon = async (req, res) => {
  try {
    const { id } = req.params;

    const rayon = await Rayon.findById(id);

    const pembimbing_id = rayon.pembimbing_id;

    const updateDataRayon = {
      nama_rayon: req.body.nama_rayon,
      nama_pembimbing: req.body.nama_pembimbing,
    };
    const resultRayon = await Rayon.findByIdAndUpdate(id, updateDataRayon, {
      new: true,
    });

    const password = req.body.password;

    const hashedPassword = await argon2.hash(password);

    const updateAccPemb = {
      username: req.body.username,
      password: hashedPassword,
    };

    const resultAccPemb = await User.findByIdAndUpdate(
      pembimbing_id,
      updateAccPemb,
      {
        new: true,
      }
    );

    res.status(200).json({
      message: "Success",
      resultRayon,
      resultAccPemb,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Failed", error: error.message });
  }
};

export const deleteRayon = async (req, res) => {
  try {
    const { id } = req.params;

    const rayon = await Rayon.findById(id);
    const pembimbing_id = rayon.pembimbing_id;

    const user = await User.findByIdAndDelete(pembimbing_id);
    const result = await Rayon.findByIdAndDelete(id);

    if (!result) {
      return res.status(404).json({ message: "Data Not Found" });
    }

    return res.status(200).json({
      message: "Success",
      result,
      user,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Failed", error: error });
  }
};

export const createRombel = async (req, res) => {
  try {
    const { nama_rombel } = req.body;

    const rombel = new Rombel({
      nama_rombel,
    });

    const saveRombel = await rombel.save();

    res.status(200).json({
      massage: "success",
      saveRombel,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error,
      massage: "Error",
    });
  }
};

export const updateRombel = async (req, res) => {
  try {
    const { id } = req.params;
    const updateDataRombel = req.body;
    const result = await Rombel.findByIdAndUpdate(id, updateDataRombel, {
      new: true,
    });

    if (!result) {
      return res.status(404).json({ message: "Data Not Found" });
    }

    return res.status(200).json({
      message: "Success",
      result,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Failed", error: error });
  }
};

export const deleteRombel = async (req, res) => {
  try {
    const { id } = req.params;

    const result = await Rombel.findByIdAndDelete(id);

    if (!result) {
      return res.status(404).json({ message: "Data Tidak Ditemukan" });
    }

    return res.status(200).json({
      message: "Success",
      result,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Failed", error: error });
  }
};

export const getRombel = async (req, res) => {
  try {
    const rombel = await Rombel.find();
    if (!rombel) {
      console.log(rombel);
      return res.status(404).json({
        message: "Data Rombel Not Found",
      });
    }

    res.status(200).json({
      rombel: rombel,
      message: "Success Get Data Rombel",
    });
  } catch (error) {
    console.log(error);
    res.status(404).json({
      error: error.message,
      message: "Failed Get Data Rombel",
    });
  }
};

export const createStudent = async (req, res) => {
  try {
    const family = new Family();
    const savedFamily = await family.save();

    const { email, nama, rombel, rayon, nis, jk } = req.body;

    const hashedPassword = await argon2.hash(nis);

    const existingStudent = await Student.findOne({ nis });

    if (existingStudent) {
      return res.status(500).json({
        message: "Student Sudah Terdaftar",
      });
    }
    const user = new User({
      username: nis,
      password: hashedPassword,
      email: email,
      role: "student",
    });

    const savedUser = await user.save();

    const student = new Student({
      keluarga_id: savedFamily._id,
      user_id: savedUser._id,
      nama: nama,
      rombel: rombel,
      rayon: rayon,
      nis: nis,
      jk: jk,
      email: email,
    });

    const savedStudent = await student.save();

    res.status(200).json({
      message: "Berhasil Menambahkan Data Student",
      student: savedStudent,
      family: savedFamily,
      user: savedUser.username,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menambahkan Data Student",
    });
  }
};

export const getStudent = async (req, res) => {
  try {
    const students = await Student.find()
      .populate([
        { path: "keluarga_id", model: "Family" },
        { path: "dokumen_id", model: "Dokumen" },
      ])
      .lean();
    if (!students) {
      console.log(students);
      return res.status(404).json({
        message: "Data Student is Empty",
      });
    }

    res.status(200).json({
      message: "Succes To Get Data Student",
      students: students,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Failed To Get Data Student",
    });
  }
};

export const getOneStudent = async (req, res) => {
  try {
    const { id } = req.params;
    const student = await Student.findById(id)
      .populate([
        { path: "dokumen_id", model: "Dokumen" },
        { path: "keluarga_id", model: "Family" },
        { path: "user_id", model: "User" },
      ])
      .lean();

    if (!student) {
      console.log(student);
      return res.status(404).json({
        message: "Data Student Not Found",
      });
    }
    res.status(200).json({
      message: "Success to Get One Student",
      student: student,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Failed to Get One Student",
    });
  }
};

export const getOneStudentLogin = async (req, res) => {
  try {
    const { id } = req.params;
    const student = await Student.findOne({ user_id: id })
      .populate([
        { path: "dokumen_id", model: "Dokumen" },
        { path: "keluarga_id", model: "Family" },
        { path: "user_id", model: "User" },
      ])
      .lean();

    if (!student) {
      console.log(student);
      return res.status(404).json({
        message: "Student Not Found",
      });
    }

    res.status(200).json({
      message: "Get Data Success",
      student: student,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Get Data Failed",
      error: error.message,
    });
  }
};

export const updateStudent = async (req, res) => {
  try {
    const { id } = req.params;
    const student = await Student.findById(id);
    const family_id = student.keluarga_id;

    if (!student) {
      console.log(student);
      return res.status(404).json({
        message: "Data Student Not Found",
      });
    }

    const updateStudent = {
      nama: req.body.nama,
      nisn: req.body.nisn,
      nik: req.body.nik,
      no_kk: req.body.no_kk,
      tempat_lahir: req.body.tempat_lahir,
      tanggal_lahir: req.body.tanggal_lahir,
      no_akta: req.body.no_akta,
      agama: req.body.agama,
      kewarganegaraan: req.body.kewarganegaraan,
      alamat: req.body.alamat,
      rt: req.body.rt,
      rw: req.body.rw,
      nama_dusun: req.body.nama_dusun,
      kecamatan: req.body.kecamatan,
      nama_kota: req.body.nama_kota,
      provinsi: req.body.provinsi,
      kode_pos: req.body.kode_pos,
      transportasi: req.body.transportasi,
      anak_ke: req.body.anak_ke,
      tinggal_bersama: req.body.tinggal_bersama,
      no_telp: req.body.no_telp,
      tb: req.body.tb,
      bb: req.body.bb,
      gol_darah: req.body.gol_darah,
      asal_smp: req.body.asal_smp,
      no_ijazah_smp: req.body.no_ijazah_smp,
      skhun: req.body.skhun,
      no_un: req.body.no_un,
    };
    const resultStudent = await Student.findByIdAndUpdate(id, updateStudent, {
      new: true,
    });

    if (!resultStudent) {
      console.log(resultStudent);
      return res.status(404).json({
        message: "Data Student Not Found",
      });
    }

    const updatedFamily = {
      nama_ayah: req.body.nama_ayah,
      nik_ayah: req.body.nik_ayah,
      tanggal_lahir_ayah: req.body.tanggal_lahir_ayah,
      pendidikan_ayah: req.body.pendidikan_ayah,
      pekerjaan_ayah: req.body.pekerjaan_ayah,
      penghasilan_ayah: req.body.penghasilan_ayah,
      nama_ibu: req.body.nama_ibu,
      nik_ibu: req.body.nik_ibu,
      tanggal_lahir_ibu: req.body.tanggal_lahir_ibu,
      pendidikan_ibu: req.body.pendidikan_ibu,
      pekerjaan_ibu: req.body.pekerjaan_ibu,
      penghasilan_ibu: req.body.penghasilan_ibu,
      nama_wali: req.body.nama_wali,
      nik_wali: req.body.nik_wali,
      tanggal_lahir_wali: req.body.tanggal_lahir_wali,
      pendidikan_wali: req.body.pendidikan_wali,
      pekerjaan_wali: req.body.pekerjaan_wali,
      penghasilan_wali: req.body.penghasilan_wali,
    };

    const resultFamily = await Family.findByIdAndUpdate(
      family_id,
      updatedFamily,
      {
        new: true,
      }
    );

    if (!resultFamily) {
      console.log(resultFamily);
      return res.status(404).json({
        message: "Data Family Not Found",
      });
    }
    res.status(201).json({
      message: "Berhasil Update Data Student",
      student: resultStudent,
      family: resultFamily,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Update Data Student",
    });
  }
};

export const deleteStudent = async (req, res) => {
  try {
    const { id } = req.params;
    const student = await Student.findById(id);

    if (!student) {
      console.log(student);
      return res.status(404).json({
        message: "Data Student Not Found",
      });
    }

    const family_id = student.keluarga_id;
    const dokumen_id = student.dokumen_id;
    const nis = student.nis;

    const deleteFamily = await Family.findByIdAndDelete(family_id);
    const deleteDokumen = await Dokumen.findByIdAndDelete(dokumen_id);
    const deleteAcc = await User.findOneAndDelete({ username: nis });
    const deleteStudent = await Student.findByIdAndDelete(id);

    res.status(200).json({
      message: "Berhasil Menghapus Data Student",
      student: deleteStudent,
      family: deleteFamily,
      dokumen: deleteDokumen,
      user: deleteAcc,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.massage,
      message: "Gagal Menghapus Data Student",
    });
  }
};

// export const uploadFile = async (req, res) => {
//   try {
//     const { id } = req.params;

//     // const { ijazah_smp } = req.file;
//     // const { akte_kelahiran } = req.file;
//     // const { skhun } = req.file;
//     // const { kk } = req.file;

//     // const result = await Dokumen.create({
//     //   ijazah_smp,
//     //   akte_kelahiran,
//     //   skhun,
//     //   kk,
//     // });

//     let ijazah_smp = [];
//     let akte_kelahiran = [];
//     let skhun = [];
//     let kk = [];

//     if (req.files) {
//       if (req.files && req.files["ijazah_smp"]) {
//         req.files["ijazah_smp"].forEach((file) => {
//           const filePath = `${file.filename}`;
//           ijazah_smp.push(filePath);
//         });
//       }

//       if (req.files && req.files["akte_kelahiran"]) {
//         req.files["akte_kelahiran"].forEach((file) => {
//           const filePath = `${file.filename}`;
//           akte_kelahiran.push(filePath);
//         });
//       }

//       if (req.files && req.files["skhun"]) {
//         req.files["skhun"].forEach((file) => {
//           const filePath = `${file.filename}`;
//           skhun.push(filePath);
//         });
//       }

//       if (req.files && req.files["kk"]) {
//         req.files["kk"].forEach((file) => {
//           const filePath = `${file.filename}`;
//           kk.push(filePath);
//         });
//       }
//     }

//     const result = await Dokumen.create({
//       ijazah_smp: ijazah_smp,
//       akte_kelahiran: akte_kelahiran,
//       skhun: skhun,
//       kk: kk,
//     });

//     const student = await Student.findById(id);

//     if (!student) {
//       console.log(student);
//       return res.status(404).json({
//         message: "Data Student Not Found",
//       });
//     }

//     await student.updateOne({
//       dokumen_id: result._id,
//     });

//     return res.status(200).json({
//       message: "Behasil",
//       data: result,
//       dokumen_id: student.dokumen_id,
//     });
//   } catch (error) {
//     console.log(error);
//     res.status(500).json({ message: "Error" });
//   }
// };

export const uploadMiddleware = multer({
  storage: multer.diskStorage({
    destination: (req, file, cb) => {
      cb(null, "uploads/");
    },
    filename: (req, file, cb) => {
      cb(
        null,
        file.fieldname + "-" + Date.now() + path.extname(file.originalname)
      );
    },
  }),
  limits: { fileSize: 1000000 }, // 1 MB limit
}).fields([
  { name: "documentIjazah", maxCount: 1 },
  { name: "documentAkte", maxCount: 1 },
  { name: "documentSkhun", maxCount: 1 },
  { name: "documentKk", maxCount: 1 },
]);

export const uploadImage = async (req, res) => {
  try {
    const { id } = req.params;

    uploadMiddleware(req, res, async (err) => {
      if (err) {
        return res.status(500).json({ message: err.message });
      }

      const { documentIjazah, documentAkte, documentSkhun, documentKk } =
        req.files;

      console.log(req.files);

      const newImages = {
        documentIjazah: documentIjazah
          ? documentIjazah.map((file) => file.path)
          : [],
        documentAkte: documentAkte ? documentAkte.map((file) => file.path) : [],
        documentSkhun: documentSkhun
          ? documentSkhun.map((file) => file.path)
          : [],
        documentKk: documentKk ? documentKk.map((file) => file.path) : [],
      };

      const student = await Student.findById(id);

      if (!student) {
        return res.status(404).json({
          message: "Data Student Not Found",
        });
      }

      try {
        const images = await Dokumen.create(newImages);

        const result_id = await Student.updateOne({
          dokumen_id: images._id,
        });

        // Create a response object with the desired structure
        const response = {
          message: "Files uploaded successfully",
          documents: {
            documentIjazah: images.documentIjazah || [],
            documentAkte: images.documentAkte || [],
            documentSkhun: images.documentSkhun || [],
            documentKk: images.documentKk || [],
            _id: images._id,
            __v: images.__v,
          },
          dokumen_id: result_id,
        };

        return res.json(response);
      } catch (error) {
        return res.status(500).json({ message: error.message });
      }
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: error.message });
  }
};

export const verifikasiData = async (req, res) => {
  try {
    const { id } = req.params;

    const verifikasi = {
      status_data_diri: "Verifikasi",
    };

    const updateStatus = await Student.findByIdAndUpdate(id, verifikasi, {
      new: true,
    });

    res.status(200).json({
      message: "Berhasil Verifikasi",
      status: updateStatus.status_data_diri,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Verifikasi",
    });
  }
};

export const verifikasiFamily = async (req, res) => {
  try {
    const { id } = req.params;
    const verifikasi = {
      status_data_family: "Verifikasi",
    };

    const updateStatus = await Student.findByIdAndUpdate(id, verifikasi, {
      new: true,
    });

    res.status(200).json({
      message: "Berhasil Verifikasi",
      status: updateStatus.status_data_family,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Verifikasi",
    });
  }
};

export const verifikasiDokumen = async (req, res) => {
  try {
    const { id } = req.params;
    const verifikasi = {
      status_data_dokumen: "Verifikasi",
    };

    const updateStatus = await Student.findByIdAndUpdate(id, verifikasi, {
      new: true,
    });

    res.status(200).json({
      message: "Berhasil Verifikasi",
      status: updateStatus.status_data_dokumen,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Verifikasi",
    });
  }
};


/////////////////////////////////////////////////////////////////////////////////////////

import User from "../models/User.js";

const isLogin = async (req, res, next) => {
  try {
    const user = await User.findById(req.user);
    if (user.refreshToken === null || user.refreshToken === "")
      return res.status(403).json({ msg: "You must logged in" });

    next();
  } catch (error) {
    console.log(error);
  }
};

export default isLogin;


////////////////////////////////////////////////

import express from "express";
import {
  gtkGroupRayon,
  getGtk,
  getOneGtk,
  getOneGtkLogin,
  createGtk,
  updateGtk,
  createStatus,
  createJenis,
  getStatus,
  getJenis,
  createKepegawaian,
  createAnak,
  deleteAnak,
  createPendidikan,
  updatePendidikan,
  deletePendidikan,
  createBeasiswa,
  createSertifikasi,
  createDiklat,
  createPenugasan,
  createTugas,
  createPenghargaan,
  createJabatan,
  createGaji,
  createInpassing,
  createTunjangan,
} from "../controllers/gtkController.js";
import { importCsv } from "../controllers/csvController.js";
// import { isGuru } from "../middleware/isGuru.js";
// import { isAdmin } from "../middleware/isAdmin.js";
// import { isLogin } from "../middleware/isLogin.js";

const routes = express.Router();
// routes.use(isLogin);
routes.get("/status-kepeg", getStatus);
routes.get("/jenis-ptk", getJenis);

routes.get("/gtk", getGtk);
routes.get("/gtk/group-rayon/:id", gtkGroupRayon);
routes.get("/gtk/:id", getOneGtk);
routes.post("/gtk", createGtk);
routes.put("/gtk/update/:id", updateGtk);
routes.get("/dashboard/gtk/:id", getOneGtkLogin);

routes.post("/status-pegawai", createStatus);
routes.post("/jenis-ptk", createJenis);

routes.post("/anak/:id", createAnak);
routes.delete("/anak/:id", deleteAnak);

routes.post("/sertifikasi/:id", createSertifikasi);
routes.post("/kepegawaian/:id", createKepegawaian);

routes.post("/pendidikan/:id", createPendidikan);
routes.put("/update/pendidikan/:id", updatePendidikan);
routes.delete("/delete/pendidikan/:id", deletePendidikan);

routes.post("/beasiswa/:id", createBeasiswa);
routes.post("/diklat/:id", createDiklat);
routes.post("/penugasan/:id", createPenugasan);
routes.post("/tugas/:id", createTugas);
routes.post("/penghargaan/:id", createPenghargaan);
routes.post("/jabatan/:id", createJabatan);
routes.post("/gaji/:id", createGaji);
routes.post("/inpasssing/:id", createInpassing);
routes.post("/tunjangan/:id", createTunjangan);

routes.post("/csv", importCsv);

export default routes;



//////////////////////////////////////

import Gtk from "../models/Gtk/Gtk.js";
import Kepegawaian from "../models/Gtk/Kepegawaian.js";
import RiwayatPendidikan from "../models/Gtk/RiwayatPendidikan.js";
import StatusKepegawaian from "../models/Gtk/StatusKepegawaian.js";
import JenisPtk from "../models/Gtk/JenisPtk.js";
import Anak from "../models/Gtk/Anak.js";
import Beasiswa from "../models/Gtk/Beasiswa.js";
import Diklat from "../models/Gtk/Diklat.js";
import Sertifikasi from "../models/Gtk/Sertifikasi.js";
import Penugasan from "../models/Gtk/Penugasan.js";
import TugasTambahan from "../models/Gtk/TugasTambahan.js";
import Penghargaan from "../models/Gtk/Penghargaan.js";
import RiwayatJabatan from "../models/Gtk/RiwayatJabatan.js";
import RiwayatGaji from "../models/Gtk/RiwayatGaji.js";
import Inpassing from "../models/Gtk/Inpassing.js";
import Tunjangan from "../models/Gtk/Tunjangan.js";
import User from "../models/User.js";
import DocumentGTK from "../models/Gtk/documentGtk.js";
import Rayon from "../models/Student/Rayon.js";
import Student from "../models/Student/Student.js";
import argon2 from "argon2";
import { refreshToken } from "./Auth.js";
// All method for model Anak
// Get Data
export const getAnak = async (req, res) => {
  try {
    const { id } = req.params;
    const anak = await Anak.findById(id);
    if (!anak) {
      console.log(anak);
      return res.status(404).json({
        message: "Data Anak Not Found",
      });
    }

    res.status(200).json({
      message: "Success to Get Data Anak",
      anak: anak,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Failed to Get Data Anak",
      error: error.message,
    });
  }
};

// Create Data
export const createAnak = async (req, res) => {
  try {
    const { id } = req.params;

    const dataGtk = await Gtk.findById(id);
    if (!dataGtk) {
      console.log(dataGtk);
      return res.status(404).json({
        error: "Data GTK Not Found",
        message: "Data GTK Tidak di Temukan",
      });
    }

    const formAnak = req.body;

    const anak = new Anak({
      ...formAnak,
    });

    const savedAnak = await anak.save();

    dataGtk.anak_id.push(savedAnak._id);
    await dataGtk.save();

    res.status(201).json({
      anak: savedAnak,
      message: "Berhasil Menambahkan Data Anak",
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menambahkan Data Anak",
    });
  }
};
// Update Data
export const updateAnak = async function (req, res) {
  try {
    const { id } = req.params;
    const formUpdateAnak = req.body;
    const updateAnak = await Anak.findByIdAndUpdate(id, formUpdateAnak, {
      new: true,
    });
    if (!updateAnak) {
      return res.status(404).json({
        massage: "Data Anak Not Found",
      });
    }
    res.status(201).json({
      message: "Berhasil Mengubah Data Anak",
      update: updateAnak,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Mengubah Data Anak",
    });
  }
};
// Delete Data
export const deleteAnak = async (req, res) => {
  try {
    const { id } = req.params;

    const deletedAnak = await Anak.findByIdAndDelete(id);

    if (!deletedAnak) {
      console.log(deletedAnak);
      return res.status(404).json({
        message: "Data Anak Not Found",
      });
    }

    res.status(201).json({
      message: "Berhasil Menghapus Data Anak",
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menghapus Data Anak",
    });
  }
};

// All method for model Beasiswa
// Get Data
export const getBeasiswa = async (req, res) => {
  try {
    const { id } = req.params;
    const beasiswa = await Beasiswa.findById(id);
    if (!beasiswa) {
      console.log(beasiswa);
      return res.status(404).json({
        message: "Data Beasiswa Not Found",
      });
    }

    res.status(200).json({
      message: "Success to Get Data Beasiswa",
      beasiswa: beasiswa,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Failed to Get Data Beasiswa",
      error: error.message,
    });
  }
};

// Create Data
export const createBeasiswa = async (req, res) => {
  try {
    const { id } = req.params;

    const dataGtk = await Gtk.findById(id);
    if (!dataGtk) {
      console.log(dataGtk);
      return res.status(404).json({
        error: "Data GTK Not Found",
        message: "Data GTK Tidak di Temukan",
      });
    }

    const formBeasiswa = req.body;

    const beasiswa = new Beasiswa({
      ...formBeasiswa,
    });

    const savedBeasiswa = await beasiswa.save();

    dataGtk.beasiswa_id.push(savedBeasiswa._id);
    await dataGtk.save();

    res.status(201).json({
      Beasiswa: savedBeasiswa,
      message: "Berhasil Menambahkan Data Beasiswa",
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menambahkan Data Beasiswa",
    });
  }
};
// Update Data
export const updateBeasiswa = async function (req, res) {
  try {
    const { id } = req.params;
    const formUpdateBeasiswa = req.body;
    const updateBeasiswa = await Beasiswa.findByIdAndUpdate(id, formUpdateBeasiswa, {
      new: true,
    });
    if (!updateBeasiswa) {
      return res.status(404).json({
        massage: "Data Anak Not Found",
      });
    }
    res.status(201).json({
      message: "Berhasil Mengubah Data Beasiswa",
      update: updateBeasiswa,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Mengubah Data Beasiswa",
    });
  }
};

// Delete Data
export const deleteBeasiswa = async (req, res) => {
  try {
    const idBeasiswa = req.params;

    const deletedBeasiswa = await Beasiswa.findByIdAndDelete(idBeasiswa);
    if (!deletedBeasiswa) {
      console.log(deletedBeasiswa);
      return res.status(404).json({
        message: "Data Beasiswa Not Found",
      });
    }

    res.status(200).json({
      message: "Berhasil Menghapus Data Beasiswa",
    });
  } catch (error) {
    console.loh(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menghapus Data Beasiswa",
    });
  }
};
// All method for models Kepegawaian
// Get Data
export const getKepagawaian = async (req, res) => {
  try {
    const { id } = req.params;
    const beasiswa = await Beasiswa.findById(id);
    if (!beasiswa) {
      console.log(beasiswa);
      return res.status(404).json({
        message: "Data Beasiswa Not Found",
      });
    }

    res.status(200).json({
      message: "Success to Get Data Beasiswa",
      beasiswa: beasiswa,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Failed to Get Data Beasiswa",
      error: error.message,
    });
  }
};

// Create Data
export const createKepegawaian = async (req, res) => {
  try {
    const { id } = req.params;

    const dataGtk = await Gtk.findById(id);
    if (!dataGtk) {
      console.log(dataGtk);
      return res.status(404).json({
        error: "Data GTK Not Found",
        message: "Data GTK Tidak di Temukan",
      });
    }

    const formKepegawaian = req.body;
    const kepegawaian = new Kepegawaian({
      ...formKepegawaian,
    });

    const savedKepegawaian = await kepegawaian.save();

    dataGtk.kepegawaian_id.push(savedKepegawaian._id);
    await dataGtk.save();

    res.status(201).json({
      massage: "Berhasil Menambahkan Data Kepegawaian",
      data: savedKepegawaian,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menambahkan Data Kepegawaian",
    });
  }
};
// Update Data
export const updateKepegawaian = async function (req, res) {
  try {
    const { id } = req.params;
    const formUpdateKepegawaian = req.body;
    const updateKepegawaian = await Kepegawaian.findByIdAndUpdate(id, formUpdateKepegawaian, {
      new: true,
    });
    if (!updateKepegawaian) {
      return res.status(404).json({
        massage: "Data Anak Not Found",
      });
    }
    res.status(201).json({
      message: "Berhasil Mengubah Data Kepegawaian",
      update: updateKepegawaian,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Mengubah Data Kepegawaian",
    });
  }
};

// Delete Data
export const deleteKepegawaian = async (req, res) => {
  try {
    const idKepegawaian = req.params;

    const deletedKepegawaian = await Kepegawaian.findByIdAndDelete(idKepegawaian);

    if (!deletedKepegawaian) {
      console.log(deletedKepegawaian);
      return res.status(404).json({
        message: "Data Kepegawaian Not Found",
      });
    }

    res.status(200).json({
      message: "Berhasil Menghapus Data Kepegawaian",
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menghapus Data Kepegawaian",
    });
  }
};
// All method for model Riwayat Pendidikan
// Get Data
export const getPendidikan = async (req, res) => {
  try {
    const { id } = req.params;
    const pendidikan = await RiwayatPendidikan.findById(id);
    if (!pendidikan) {
      console.log(pendidikan);
      return res.status(404).json({
        message: "Data Riwayat Pendidikan Not Found",
      });
    }

    res.status(200).json({
      message: "Success to Get Data Riwayat Pendidikan",
      pendidikan: pendidikan,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Failed to Get Data Riwayat Pendidikan",
      error: error.message,
    });
  }
};

// Create Data
export const createPendidikan = async (req, res) => {
  try {
    const { id } = req.params;

    const dataGtk = await Gtk.findById(id);

    if (!dataGtk) {
      console.log(dataGtk);
      return res.status(404).json({
        error: "Data GTK Not Found",
        message: "Data GTK Tidak di Temukan",
      });
    }

    const formPendidikan = req.body;
    const pendidikan = new RiwayatPendidikan({
      ...formPendidikan,
    });

    const savedPendidikan = await pendidikan.save();

    dataGtk.pendidikan_id.push(savedPendidikan._id);
    await dataGtk.save();

    res.status(201).json({
      message: "Berhasil Menambahkan Data Riwayat Pendidikan",
      riwayat_pendidikan: savedPendidikan,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menambahkan Data Riwayat Pendidikan",
    });
  }
};
// Update Data
export const updatePendidikan = async function (req, res) {
  try {
    const { id } = req.params;
    const formUpdatePendidikan = req.body;
    const updatePendidikan = await RiwayatPendidikan.findByIdAndUpdate(id, formUpdatePendidikan, {
      new: true,
    });
    if (!updatePendidikan) {
      return res.status(404).json({
        massage: "Data Anak Not Found",
      });
    }
    res.status(201).json({
      message: "Berhasil Mengubah Data Riwayat Pendidikan",
      update: updatePendidikan,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Mengubah Data Riwayat Pendidikan",
    });
  }
};

// Delete Data
export const deletePendidikan = async (req, res) => {
  try {
    const { id } = req.params;

    const deletedPendidikan = await RiwayatPendidikan.findByIdAndDelete(id);

    if (!deletedPendidikan) {
      console.log(deletedPendidikan);
      return res.status(404).json({
        message: "Data Riwayat Pendidikan Not Found",
      });
    }

    res.status(200).json({
      message: "Berhasil Menghapus Data Riwayat Pendidikan",
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menghapus Data Riwayat Pendidikan",
    });
  }
};
// All method for model Sertifikasi
// Get Data
export const getSertifikasi = async (req, res) => {
  try {
    const { id } = req.params;
    const sertifikasi = await Sertifikasi.findById(id);
    if (!sertifikasi) {
      console.log(sertifikasi);
      return res.status(404).json({
        message: "Data Sertifikasi Not Found",
      });
    }

    res.status(200).json({
      message: "Success to Get Data Sertifikasi",
      sertifikasi: sertifikasi,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Failed to Get Data Sertifikasi",
      error: error.message,
    });
  }
};

// Create Data
export const createSertifikasi = async (req, res) => {
  try {
    const { id } = req.params;

    const dataGtk = await Gtk.findById(id);

    if (!dataGtk) {
      console.log(dataGtk);
      return res.status(404).json({
        error: "Data GTK Not Found",
        message: "Data GTK Tidak di Temukan",
      });
    }

    const formSertifikasi = req.body;
    const sertifikasi = new Sertifikasi({
      ...formSertifikasi,
    });

    const savedSertifikasi = await sertifikasi.save();

    dataGtk.sertifikasi_id.push(savedSertifikasi._id);
    await dataGtk.save();

    res.status(201).json({
      message: "Berhasil Menambahkan Data Sertifikasi",
      sertifikasi: savedSertifikasi,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menambahkan Data Sertifikasi",
    });
  }
};
// Update Data
export const updateSertifikasi = async function (req, res) {
  try {
    const { id } = req.params;
    const formUpdateSertifikasi = req.body;
    const updateSertifikasi = await Sertifikasi.findByIdAndUpdate(id, formUpdateSertifikasi, {
      new: true,
    });
    if (!updateSertifikasi) {
      return res.status(404).json({
        massage: "Data Anak Not Found",
      });
    }
    res.status(201).json({
      message: "Berhasil Mengubah Data Sertifikasi",
      update: updateSertifikasi,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Mengubah Data Sertifikasi",
    });
  }
};

// Delete Data
export const deleteSertifikasi = async (req, res) => {
  try {
    const { id } = req.params;

    const deletedSertifikasi = await Sertifikasi.findByIdAndDelete(id);

    if (deletedSertifikasi) {
      console.log(deletedSertifikasi);
      return res.status(404).json({
        message: "Data Sertifikasi Not Found",
      });
    }

    res.status(200).json({
      message: "Berhasil Menghapus Data Sertifikasi",
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menghapus Data Sertifikasi",
    });
  }
};
// All method for model Diklat
// Get Data
export const getDiklat = async (req, res) => {
  try {
    const { id } = req.params;
    const diklat = await Diklat.findById(id);
    if (!diklat) {
      console.log(diklat);
      return res.status(404).json({
        message: "Data Diklat Not Found",
      });
    }

    res.status(200).json({
      message: "Succes to Get Data Diklat",
      diklat: diklat,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Failed to Get Dat Diklat",
      error: error.message,
    });
  }
};
// Create Data
export const createDiklat = async (req, res) => {
  try {
    const { id } = req.params;

    const dataGtk = await Gtk.findById(id);
    if (!dataGtk) {
      console.log(dataGtk);
      return res.status(404).json({
        message: "Data GTK Not Found",
      });
    }

    const formDiklat = req.body;
    const diklat = new Diklat({ ...formDiklat });

    const savedDiklat = await diklat.save();

    dataGtk.diklat_id.push(savedDiklat._id);
    await dataGtk.save();

    res.status(201).json({
      message: "Berhasil Menambahkan Data Diklat",
      diklat: savedDiklat,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menambahkan Data Diklat",
    });
  }
};
// Update Data
export const updateDiklat = async function (req, res) {
  try {
    const { id } = req.params;
    const formUpdateDiklat = req.body;
    const updateDiklat = await Diklat.findByIdAndUpdate(id, formUpdateDiklat, {
      new: true,
    });
    if (!updateDiklat) {
      return res.status(404).json({
        massage: "Data Anak Not Found",
      });
    }
    res.status(201).json({
      message: "Berhasil Mengubah Data Diklat",
      update: updateDiklat,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Mengubah Data Diklat",
    });
  }
};

// Delete Data
export const deleteDiklat = async (req, res) => {
  try {
    const { id } = req.params;

    const deletedDiklat = await Diklat.findByIdAndDelete(id);

    if (!deletedDiklat) {
      console.log(deletedDiklat);
      return res.status(404).json({
        message: "Data Diklat Not Found",
      });
    }

    res.status(200).json({
      message: "Berhasil Menghapus Data Diklat",
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menghapus Data Diklat",
    });
  }
};

// All method for model Penugasan
// Get Data
export const getPenugasan = async (req, res) => {
  try {
    const { id } = req.params;
    const penugasan = await Penugasan.findById(id);
    if (!penugasan) {
      console.log(penugasan);
      return res.status(404).json({
        message: "Data Penugasan Not Found",
      });
    }

    res.status(200).json({
      message: "Success to Get Data Penugasan",
      penugasan: penugasan,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Failed to Get Data Penugasan",
    });
  }
};
// Create Penugasan
export const createPenugasan = async (req, res) => {
  try {
    const { id } = req.params;

    const dataGtk = await Gtk.findById(id);
    if (!dataGtk) {
      console.log(dataGtk);
      return res.status(404).json({
        message: "Data GTK Not Found",
      });
    }

    const formPenugasan = req.body;
    const penugasan = new Penugasan({
      ...formPenugasan,
    });

    const savedPenugasan = await penugasan.save();

    dataGtk.penugasan_id.push(savedPenugasan._id);
    await dataGtk.save();

    res.status(201).json({
      message: "Berhasil Menambahkan Data Penugasan",
      penugasan: savedPenugasan,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menambahkan Data Penugasan",
    });
  }
};
// Update Data
export const updatePenugasan = async function (req, res) {
  try {
    const { id } = req.params;
    const formUpdatePenugasan = req.body;
    const updatePenugasan = await Penugasan.findByIdAndUpdate(id, formUpdatePenugasan, {
      new: true,
    });
    if (!updatePenugasan) {
      return res.status(404).json({
        massage: "Data Anak Not Found",
      });
    }
    res.status(201).json({
      message: "Berhasil Mengubah Data Diklat",
      update: updatePenugasan,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Mengubah Data Diklat",
    });
  }
};
// Delete Penugasana
export const deletePenugasan = async (req, res) => {
  try {
    const { id } = req.params;

    const deletedPenugasan = await Penugasan.findByIdAndDelete(id);

    if (!deletedPenugasan) {
      console.log(deletedPenugasan);
      return res.status(404).json({
        message: "Data Penugasan Not Found",
      });
    }

    res.status(200).json({
      message: "Berhasil Menghapus Data Penugasan",
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Gagal Menghapus Data Penugasan",
    });
  }
};

//  All methods for models Tugas Tambahan
// Get Data
export const getTugas = async (req, res) => {
  try {
    const { id } = req.params;
    const tugas_tambahan = await TugasTambahan.findById(id);
    if (!tugas_tambahan) {
      console.log(tugas_tambahan);
      return res.status(404).json({
        message: "Data Tugas Tambahan Not Found",
      });
    }

    res.status(200).json({
      message: "Success to Get Data Tugas Tambahan",
      tugas_tambahan: tugas_tambahan,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Failed to Get Data Tugas Tambahan",
      error: error.message,
    });
  }
};

// Create Data
export const createTugas = async (req, res) => {
  try {
    const { id } = req.params;

    const dataGtk = await Gtk.findById(id);
    if (!dataGtk) {
      console.log(dataGtk);
      return res.status(404).json({
        message: "Data GTK Not Found",
      });
    }

    const formTugas = req.body;
    const tugasTambahan = new TugasTambahan({
      ...formTugas,
    });

    const savedTugas = await tugasTambahan.save();

    dataGtk.tugas_tambahan_id.push(savedTugas._id);
    await dataGtk.save();

    res.status(201).json({
      message: "Berhasil Menambahkan Data Tugas Tambahan",
      tugas_tambahan: savedTugas,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menambahkan Data Tugas Tambahan",
    });
  }
};
// Update Data
export const updateTugas = async function (req, res) {
  try {
    const { id } = req.params;
    const formUpdateTugas = req.body;
    const updateTugas = await TugasTambahan.findByIdAndUpdate(id, formUpdateTugas, {
      new: true,
    });
    if (!updateTugas) {
      return res.status(404).json({
        massage: "Data Anak Not Found",
      });
    }
    res.status(201).json({
      message: "Berhasil Mengubah Data Tugas Tambahan",
      update: updateTugas,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Mengubah Data Tugas Tambahan",
    });
  }
};

// Delete Data
export const deleteTugas = async (req, res) => {
  try {
    const { id } = req.params;

    const deletedTugas = await TugasTambahan.findByIdAndDelete(id);

    if (!deletedTugas) {
      console.log(deletedTugas);
      return res.status(404).json({
        message: "Data Tugas Tambahan Not Found",
      });
    }

    res.status(200).json({
      message: "Berhasil Menghapus Data Tugas Tambahan",
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menghapus Data Tugas Tambahan",
    });
  }
};

// All methods for model Penghargaan
// Create Data
export const createPenghargaan = async (req, res) => {
  try {
    const { id } = req.params;

    const dataGtk = await Gtk.findById(id);
    if (!dataGtk) {
      console.log(dataGtk);
      return res.status(404).json({
        message: "Data GTK Not Found",
      });
    }

    const formPenghargaan = req.body;
    const penghargaan = new Penghargaan({
      ...formPenghargaan,
    });

    const savedPenghargaan = await penghargaan.save();

    dataGtk.penghargaan_id.push(savedPenghargaan._id);
    await dataGtk.save();

    res.status(201).json({
      message: "Berhasil Menambahkan Data Penghargaan",
      penghargaan: savedPenghargaan,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Gagal Menambahkan Data Penghargaan",
    });
  }
};
// Update Data
export const updatePenghargaan = async function (req, res) {
  try {
    const { id } = req.params;
    const formUpdatePenghargaan = req.body;
    const updatePenghargaan = await Penghargaan.findByIdAndUpdate(id, formUpdatePenghargaan, {
      new: true,
    });
    if (!updatePenghargaan) {
      return res.status(404).json({
        massage: "Data Anak Not Found",
      });
    }
    res.status(201).json({
      message: "Berhasil Mengubah Data Penghargaan",
      update: updatePenghargaan,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Mengubah Data Penghargaan",
    });
  }
};
// Delete Data
export const deletePenghargaan = async (req, res) => {
  try {
    const { id } = req.params;

    const deletedPenghargaan = await Penghargaan.findByIdAndDelete(id);

    if (!deletedPenghargaan) {
      return res.status(404).json({
        message: "Data Penghargaan Not Found",
      });
    }

    res.status(200).json({
      message: "Berhasil Manghapus Data Penghargaan",
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Gagal Menghapus Data Penghargaan",
    });
  }
};

// All methods for model Riwayat Jabatan
// Get Data
export const getJabatan = async (req, res) => {
  try {
    const { id } = req.params;
    const riwayat_jabatan = await RiwayatJabatan.findById(id);
    if (!riwayat_jabatan) {
      console.log(riwayat_jabatan);
      return res.status(404).json({
        message: "Data Riwayat Jabatan Not Found",
      });
    }

    res.status(200).json({
      message: "Success to Get Data Riwayat Jabatan",
      riwayat_jabatan: riwayat_jabatan,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Failed to Get Data Riwayat Jabatan",
      error: error.message,
    });
  }
};
// Create Data
export const createJabatan = async (req, res) => {
  try {
    const { id } = req.params;

    const dataGtk = await Gtk.findById(id);
    if (!dataGtk) {
      console.log(dataGtk);
      return res.status(404).json({
        message: "Data GTK Not Found",
      });
    }

    const formJabatan = req.body;
    const riwayatJabatan = new RiwayatJabatan({
      ...formJabatan,
    });

    const savedJabatan = await riwayatJabatan.save();

    dataGtk.jabatan_id.push(savedJabatan._id);
    await dataGtk.save();

    res.status(201).json({
      message: "Berhasil Menambahkan Data Riwayat Jabatan",
      riwayat_jabatan: savedJabatan,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menambahkan Data Riwayat Jabatan",
    });
  }
};
// Update Data
export const updateJabatan = async function (req, res) {
  try {
    const { id } = req.params;
    const formUpdateJabatan = req.body;
    const updateJabatan = await RiwayatJabatan.findByIdAndUpdate(id, formUpdateJabatan, {
      new: true,
    });
    if (!updateJabatan) {
      return res.status(404).json({
        massage: "Data Anak Not Found",
      });
    }
    res.status(201).json({
      message: "Berhasil Mengubah Data Riwayat Jabatan",
      update: updateJabatan,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Mengubah Data Riwayat Jabatan",
    });
  }
};

// Delete Data
export const deleteJabatan = async (req, res) => {
  try {
    const { id } = req.params;

    const deletedJabatan = await RiwayatJabatan.findByIdAndDelete(id);

    if (!deletedJabatan) {
      console.log(deletedJabatan);
      return res.status(404).json({
        message: "Data Riwayat Jabatan Not Found",
      });
    }

    res.status(200).json({
      message: "Berhasil Menghapus Data Riwayat Jabatan",
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Gagal Menghapus Data Riwayat Jabatan",
    });
  }
};

// All methods for model Riwayat Gaji
// Get Data
export const getGaji = async (req, res) => {
  try {
    const { id } = req.params;
    const riwayat_gaji = await RiwayatGaji.findById(id);
    if (!riwayat_gaji) {
      console.log(riwayat_gaji);
      return res.status(404).json({
        message: "Data Riwayat Gaji Not Found",
      });
    }

    res.status(200).json({
      message: "Success to Get Data Riwayat Gaji",
      riwayat_gaji: riwayat_gaji,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Failed to Get Data Riwayat Gaji",
      error: error.message,
    });
  }
};
// Create Data
export const createGaji = async (req, res) => {
  try {
    const { id } = req.param;

    const dataGtk = await Gtk.findById(id);
    if (!dataGtk) {
      console.log(dataGtk);
      return res.status(404).json({
        message: "Data GTK Not Found",
      });
    }

    const formGaji = req.body;
    const riwayatGaji = new RiwayatGaji({
      ...formGaji,
    });

    const savedGaji = await riwayatGaji.save();

    dataGtk.gaji_id.push(savedGaji._id);
    await dataGtk.save();

    res.status(201).json({
      message: "Berhasil Menambahkan Data Riwayat Gaji",
      riwayat_gaji: savedGaji,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menambahkan Data Riwayat Gaji",
    });
  }
};
// Update Data
export const updateGaji = async function (req, res) {
  try {
    const { id } = req.params;
    const formUpdateGaji = req.body;
    const updateGaji = await RiwayatGaji.findByIdAndUpdate(id, formUpdateGaji, {
      new: true,
    });
    if (!updateGaji) {
      return res.status(404).json({
        massage: "Data Anak Not Found",
      });
    }
    res.status(201).json({
      message: "Berhasil Mengubah Data Riwayat Gaji",
      update: updateGaji,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Mengubah Data Riwayat Jabatan",
    });
  }
};

// Delete Data
export const deleteGaji = async (req, res) => {
  try {
    const { id } = req.params;

    const deletedGaji = await RiwayatGaji.findByIdAndDelete(id);

    if (!deletedGaji) {
      console.log(deleteGaji);
      return res.status(404).json({
        message: "Data Riwayat Gaji Not Found",
      });
    }

    res.status(200).json({
      message: "Berhasil Menghapus Data Riwayat Gaji",
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menghapus Data Riwayat Gaji",
    });
  }
};

// All methods for model Inpassing
// Get Data
export const getInpassing = async (req, res) => {
  try {
    const { id } = req.params;
    const inpassing = await Inpassing.findById(id);
    if (!inpassing) {
      console.log(inpassing);
      return res.status(404).json({
        message: "Data Inpassing Not Found",
      });
    }

    res.status(200).json({
      message: "Success to Get Data Inpassing",
      inpassing: inpassing,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Failed to Get Data Inpassing",
      error: error.message,
    });
  }
};
// Create Data
export const createInpassing = async (req, res) => {
  try {
    const { id } = req.params;

    const dataGtk = await Gtk.findById(id);
    if (!dataGtk) {
      console.log(dataGtk);
      return res.status(404).json({
        message: "Data GTK Not Found",
      });
    }

    const formInpassing = req.body;
    const inpassing = new Inpassing({
      ...formInpassing,
    });

    const savedInpassing = await inpassing.save();

    dataGtk.inpassing_id.push(savedInpassing._id);
    await dataGtk.save();

    res.status(201).json({
      message: "Berhasil Menambahkan Data Inpassing",
      inpassing: savedInpassing,
    });
  } catch (error) {
    console.log(erro.massage);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menambahkan Data Inpassing",
    });
  }
};
// Update Data
export const updateInpassing = async function (req, res) {
  try {
    const { id } = req.params;
    const formUpdateInpassing = req.body;
    const updateInpassing = await Inpassing.findByIdAndUpdate(id, formUpdateInpassing, {
      new: true,
    });
    if (!updateInpassing) {
      return res.status(404).json({
        massage: "Data Anak Not Found",
      });
    }
    res.status(201).json({
      message: "Berhasil Mengubah Data Inpassing",
      update: updateInpassing,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Mengubah Data Inpassing",
    });
  }
};

// Delete Data
export const deleteInpassing = async (req, res) => {
  try {
    const { id } = req.params;

    const deletedInpassing = await Inpassing.findByIdAndDelete(id);
    if (!deletedInpassing) {
      console.log(deletedInpassing);
      return res.status(404).json({
        message: "Data Inpassing Not Found",
      });
    }

    res.status(200).json({
      message: "Berhasil Menghapus Data Inpassing",
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menghapus Data Inpassing",
    });
  }
};

// All methods for model Tunjangan\
// Get Data
export const getTunjangan = async (req, res) => {
  try {
    const { id } = req.params;
    const tunjangan = await Tunjangan.findById(id);
    if (!tunjangan) {
      console.log(tunjangan);
      return res.status(200).json({
        message: "Data Tunjangan Not Found",
      });
    }

    res.status(200).json({
      message: "Success to Get Data Tunjangan",
      tunjangan: tunjangan,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Failed to Get Data Tunjangan",
      error: error.message,
    });
  }
};
// Create Data
export const createTunjangan = async (req, res) => {
  try {
    const { id } = req.params;

    const dataGtk = await Gtk.findById(id);
    if (!dataGtk) {
      console.log(dataGtk);
      return res.status(404).json({
        message: "Data GTK Not Found",
      });
    }

    const formTunjangan = req.body;
    const tunjangan = new Tunjangan({
      ...formTunjangan,
    });

    const savedTunjangan = await tunjangan.save();

    dataGtk.tunjangan_id.push(savedTunjangan._id);
    await dataGtk.save();

    res.status(201).json({
      message: "Berhasil Menambahkan Data Tunjangan",
      tunjangan: savedTunjangan,
    });
  } catch (error) {
    console.log(error.massage);
    res.status(5005).json({
      error: error.message,
      message: "Gagal Menambahkan Data Tunjangan",
    });
  }
};
// Update Data
export const updateTunjangan = async function (req, res) {
  try {
    const { id } = req.params;
    const formUpdateTunjangan = req.body;
    const updateTunjangan = await Tunjangan.findByIdAndUpdate(id, formUpdateTunjangan, {
      new: true,
    });
    if (!updateTunjangan) {
      return res.status(404).json({
        massage: "Data Anak Not Found",
      });
    }
    res.status(201).json({
      message: "Berhasil Mengubah Data Tunjangan",
      update: updateTunjangan,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Mengubah Data Tunjangan",
    });
  }
};

// Delete Data
export const deleteTunjangan = async (req, res) => {
  try {
    const idTunjangan = req.params;

    const deletedTunjangan = await Tunjangan.findByIdAndDelete(idTunjangan);
    if (!deletedTunjangan) {
      console.log(deleteTunjangan);
      return res.status(404).json({
        message: "Data Tunjangan Not Found",
      });
    }

    res.status(200).json({
      message: "Berhasil Menghapus Data Tunjangan",
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Gagal Menghapus Data Tunjangan",
    });
  }
};

// Create Data
export const createGtk = async (req, res) => {
  try {
    const { nama_lengkap, nik, jk, tempat_lahir, tanggal_lahir, agama, no_telp, email, nip } = req.body;
    const existingGtk = await Gtk.findOne({ nik: nik });

    if (existingGtk) {
      return res.status(409).json({
        message: "Data GTK Already Exists",
      });
    }

    const hashNip = await argon2.hash(nip);

    const user = new User({
      username: nama_lengkap,
      email: email,
      password: hashNip,
      role: "guru",
    });
    const saveUser = await user.save();

    const gtk = new Gtk({
      user_id: saveUser._id,
      nama_lengkap: nama_lengkap,
      nik: nik,
      jk: jk,
      tempat_lahir: tempat_lahir,
      tanggal_lahir: tanggal_lahir,
      agama: agama,
      no_telp: no_telp,
      email: email,
      nip: nip,
    });

    const savedGtk = await gtk.save();

    res.status(200).json({
      message: "Berhasil Menambahkan Data GTk",
      gtk: savedGtk,
      user: saveUser._id,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menambahkan Data GTK",
    });
  }
};
// Update Data
export const updateGtk = async (req, res) => {
  try {
    const { id } = req.params;
    const formUpdateGtk = {
      nama_lengkap: req.body.nama_lengkap,
      nik: req.body.nik,
      jk: req.body.jk,
      tempat_lahir: req.body.tempat_lahir,
      tanggal_lahir: req.body.tanggal_lahir,
      agama: req.body.agama,
      no_telp: req.body.no_telp,
      email: req.body.email,
      nip: req.body.nip,
      nama_ibu: req.body.nama_ibu,
      alamat: req.body.alamat,
      rt: req.body.rt,
      rw: req.body.rw,
      nama_dusun: req.body.nama_dusun,
      nama_kelurahan: req.body.nama_kelurahan,
      kecamatan: req.body.kecamatan,
      kota_kab: req.body.kota_kab,
      provinsi: req.body.provinsi,
      no_kk: req.body.no_kk,
      kode_pos: req.body.kode_pos,
      kewarganegaraan: req.body.kewarganegaraan,
      npwp: req.body.npwp,
      nama_wajib_pajak: req.body.nama_wajib_pajak,
      status_kawin: req.body.status_kawin,
      nama_istri_suami: req.body.nama_istri_suami,
      nip_istri_suami: req.body.nip_istri_suami,
      pekerjaan_istri_suami: req.body.pekerjaan_istri_suami,
      no_telp_rumah: req.body.no_telp_rumah,
      bb: req.body.bb,
      tb: req.body.tb,
      gol_darah: req.body.gol_darah,
    };

    const updateGtk = await Gtk.findByIdAndUpdate(id, formUpdateGtk, {
      new: true,
    });

    if (!updateGtk) {
      console.log(updateGtk);
      return res.status(404).json({
        message: "Data Gtk Not Found",
      });
    }

    res.status(200).json({
      message: "Berhasil Mengubah Data Gtk",
      update: updateGtk,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Mengubah Data Gtk",
    });
  }
};

export const gtkGroupRayon = async (req, res) => {
  try {
    const { id } = req.params;
    const rayon = await Rayon.findOne({ pembimbing_id: id });
    const nama_rayon = rayon.nama_rayon;
    const student = await Student.find({ rayon: nama_rayon });

    if (!student) {
      console.log(student);
      return res.status(404).json({
        message: "Data Student Not Found",
      });
    }
    res.status(200).json({
      message: "Success to Get Data Student",
      student: student,
      rayon: rayon,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Failed to Get Data Student",
      error: error.message,
    });
  }
};

// Read Data
export const getGtk = async (req, res) => {
  try {
    const gtk = await Gtk.find()
      .populate([
        { path: "user_id", model: "User" },
        { path: "kepegawaian_id", model: "Kepegawaian" },
        { path: "pendidikan_id", model: "RiwayatPendidikan" },
        { path: "anak_id", model: "Anak" },
        { path: "beasiswa_id", model: "Beasiswa" },
        { path: "sertifikasi_id", model: "Sertifikasi" },
        { path: "diklat_id", model: "Diklat" },
        { path: "penugasan_id", model: "Penugasan" },
        { path: "tugas_tambahan_id", model: "TugasTambahan" },
        { path: "penghargaan_id", model: "Penghargaan" },
        { path: "jabatan_id", model: "RiwayatJabatan" },
        { path: "gaji_id", model: "RiwayatGaji" },
        { path: "inpassing_id", model: "Inpassing" },
        { path: "tunjangan_id", model: "Tunjangan" },
      ])
      .lean();
    if (!gtk) {
      console.log(gtk);
      return res.status(404).json({
        message: "Data GTK Not Found",
      });
    }
    res.status(200).json({
      message: "Get Data GTK Success",
      gtks: gtk,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Get Data GTK Failed",
    });
  }
};

export const getOneGtk = async (req, res) => {
  try {
    const { id } = req.params;
    const gtk = await Gtk.findById(id)
      .populate([
        { path: "user_id", model: "User" },
        { path: "kepegawaian_id", model: "Kepegawaian" },
        { path: "pendidikan_id", model: "RiwayatPendidikan" },
        { path: "anak_id", model: "Anak" },
        { path: "beasiswa_id", model: "Beasiswa" },
        { path: "sertifikasi_id", model: "Sertifikasi" },
        { path: "diklat_id", model: "Diklat" },
        { path: "penugasan_id", model: "Penugasan" },
        { path: "tugas_tambahan_id", model: "TugasTambahan" },
        { path: "penghargaan_id", model: "Penghargaan" },
        { path: "jabatan_id", model: "RiwayatJabatan" },
        { path: "gaji_id", model: "RiwayatGaji" },
        { path: "inpassing_id", model: "Inpassing" },
        { path: "tunjangan_id", model: "Tunjangan" },
      ])
      .lean();
    if (!gtk) {
      console.log(gtk);
      return res.status(404).json({
        message: "Data Gtk Not Found",
      });
    }

    res.status(200).json({
      message: "Get One Gtk Success",
      gtk: gtk,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Get One Gtk Failed",
    });
  }
};

export const getOneGtkLogin = async (req, res) => {
  try {
    const { id } = req.params;
    const rayon = await Rayon.findOne({ pembimbing_id: id });

    if (rayon) {
      const gtk = await Gtk.findOne({ user_id: id })
        .populate([
          { path: "user_id", model: "User" },
          { path: "kepegawaian_id", model: "Kepegawaian" },
          { path: "pendidikan_id", model: "RiwayatPendidikan" },
          { path: "anak_id", model: "Anak" },
          { path: "beasiswa_id", model: "Beasiswa" },
          { path: "sertifikasi_id", model: "Sertifikasi" },
          { path: "diklat_id", model: "Diklat" },
          { path: "penugasan_id", model: "Penugasan" },
          { path: "tugas_tambahan_id", model: "TugasTambahan" },
          { path: "penghargaan_id", model: "Penghargaan" },
          { path: "jabatan_id", model: "RiwayatJabatan" },
          { path: "gaji_id", model: "RiwayatGaji" },
          { path: "inpassing_id", model: "Inpassing" },
          { path: "tunjangan_id", model: "Tunjangan" },
        ])
        .lean();
      if (!gtk) {
        console.log(gtk);
        return res.status(404).json({
          message: "Data Gtk Not Found",
        });
      }

      const nama_rayon = rayon.nama_rayon;
      const student = await Student.find({ rayon: nama_rayon })
        .populate([
          { path: "dokumen_id", model: "Dokumen" },
          { path: "keluarga_id", model: "Family" },
          { path: "user_id", model: "User" },
        ])
        .lean();

      if (!student) {
        console.log(student);
        return res.status(404).json({
          message: "Data Student Not Found",
        });
      }
      res.status(200).json({
        message: "Get Data Success",
        gtk: gtk,
        student: student,
      });
    }
    const gtk = await Gtk.findOne({ user_id: id })
      .populate([
        { path: "user_id", model: "User" },
        { path: "kepegawaian_id", model: "Kepegawaian" },
        { path: "pendidikan_id", model: "RiwayatPendidikan" },
        { path: "anak_id", model: "Anak" },
        { path: "beasiswa_id", model: "Beasiswa" },
        { path: "sertifikasi_id", model: "Sertifikasi" },
        { path: "diklat_id", model: "Diklat" },
        { path: "penugasan_id", model: "Penugasan" },
        { path: "tugas_tambahan_id", model: "TugasTambahan" },
        { path: "penghargaan_id", model: "Penghargaan" },
        { path: "jabatan_id", model: "RiwayatJabatan" },
        { path: "gaji_id", model: "RiwayatGaji" },
        { path: "inpassing_id", model: "Inpassing" },
        { path: "tunjangan_id", model: "Tunjangan" },
      ])
      .lean();

    if (!gtk) {
      console.log(gtk);
      return res.status(404).json({
        message: "Data GTK Not Found",
      });
    }

    res.status(200).json({
      message: "Get Data Success",
      gtk: gtk,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "Get Data Failed",
      error: error.message,
    });
  }
};

// All methods for model Status Kepegawaian

// Create Data
export const createStatus = async (req, res) => {
  try {
    const { jenis_status } = req.body;

    if (!jenis_status) {
      return res.status(400).json({ message: "jenis_status is required" });
    }

    const statusKepegawaian = new StatusKepegawaian({
      jenis_status,
    });

    const saveStatus = await statusKepegawaian.save();

    res.status(201).json({
      message: "Berhasil Menambahkan Status Pegawai",
      saveStatus,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Gagal Menambahkan Status Pegawai" });
  }
};

// Read Data
export const getStatus = async (req, res) => {
  try {
    const statusKepegawaian = await StatusKepegawaian.find();

    if (!statusKepegawaian) {
      return res.status(404).json({ message: "Data Status Kepegawaian Not Found" });
    }

    res.status(201).json({
      message: "Get Data Status Kepegawaian Success",
      status_kepegawaian: statusKepegawaian,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Get Data Status Kepegawaian Failed",
    });
  }
};

// All methods for model Jenis PTK

// Create Data
export const createJenis = async (req, res) => {
  try {
    const { jenis_ptk } = req.body;
    const jenis = new JenisPtk({
      jenis_ptk: jenis_ptk,
    });

    const savedJenis = await jenis.save();

    res.status(201).json({
      message: "Berhasil Menambahkan Jenis PTK",
      savedJenis,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Gagal Menambahkan Jenis PTK",
    });
  }
};

// Read Data
export const getJenis = async (req, res) => {
  try {
    const jenisPtk = await JenisPtk.find();

    if (!jenisPtk) {
      return res.status(404).json({ message: "Data Jenis PTK Not Found" });
    }

    res.status(201).json({
      message: "Get Data Jenis PTK Success",
      jenis_ptk: jenisPtk,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      error: error.message,
      message: "Get Data Jenis PTK Failed",
    });
  }
};

export const uploadGtk = async (req, res) => {
  try {
    const { id } = req.params;

    const { ijazah_sd } = req.body;
    const { ijazah_smp } = req.body;
    const { ijazah_sma } = req.body;
    const { ktp } = req.body;
    const { akte_kelahiran } = req.body;
    const { kk } = req.body;

    const result = await DocumentGTK.create({
      ijazah_sd,
      ijazah_smp,
      ijazah_sma,
      ktp,
      akte_kelahiran,
      kk,
    });

    const gtk = await Gtk.findById(id);

    if (!gtk) {
      console.log(gtk);
      return res.status(404).json({
        message: "Data GTK Not Found",
      });
    }

    await gtk.updateOne({
      gtk_dokumen_id: result._id,
    });

    return res.status(200).json({
      message: "Behasil",
      data: result,
      dokumen_id: gtk.gtk_dokumen_id,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Error" });
  }
};
